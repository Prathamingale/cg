#include <GL/freeglut.h>
#include <GL/glut.h>
#include <iostream>
#include <vector>

// Structure to store coordinates of a point
struct Point {
    int x, y;
};

// Structure to store the region codes of a point
struct RegionCodes {
    bool left, right, bottom, top;
};

// Constants for the region codes
const int INSIDE = 0;    // 0000
const int LEFT = 1;      // 0001
const int RIGHT = 2;     // 0010
const int BOTTOM = 4;    // 0100
const int TOP = 8;       // 1000

// Function to draw a point
void drawPoint(int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

// Function to draw a polygon
void drawPolygon(std::vector<Point>& vertices) {
    glBegin(GL_LINE_LOOP);
    for (const auto& vertex : vertices) {
        glVertex2i(vertex.x, vertex.y);
    }
    glEnd();
}

// Function to compute the region codes for a point
RegionCodes computeRegionCodes(Point p, int xmin, int xmax, int ymin, int ymax) {
    RegionCodes codes;
    codes.left = p.x < xmin;
    codes.right = p.x > xmax;
    codes.bottom = p.y < ymin;
    codes.top = p.y > ymax;
    return codes;
}

// Function to clip a line segment using Cohen-Sutherland algorithm
bool clipLine(Point& p1, Point& p2, int xmin, int xmax, int ymin, int ymax) {
    RegionCodes codes1 = computeRegionCodes(p1, xmin, xmax, ymin, ymax);
    RegionCodes codes2 = computeRegionCodes(p2, xmin, xmax, ymin, ymax);

    while (true) {
        if ((codes1.left || codes1.right || codes1.bottom || codes1.top) &&
            (codes2.left || codes2.right || codes2.bottom || codes2.top) &&
            (codes1.left == codes2.left && codes1.right == codes2.right &&
             codes1.bottom == codes2.bottom && codes1.top == codes2.top)) {
            // Trivial reject: both endpoints are outside the same region
            return false;
        } else if (!(codes1.left || codes1.right || codes1.bottom || codes1.top) &&
                   !(codes2.left || codes2.right || codes2.bottom || codes2.top)) {
            // Trivial accept: both endpoints are inside the viewport
            return true;
        } else {
            // Perform the Cohen-Sutherland clipping
            if (codes1.left) {
                p1.y += (p2.y - p1.y) * (xmin - p1.x) / (p2.x - p1.x);
                p1.x = xmin;
            } else if (codes1.right) {
                p1.y += (p2.y - p1.y) * (xmax - p1.x) / (p2.x - p1.x);
                p1.x = xmax;
            } else if (codes1.bottom) {
                p1.x += (p2.x - p1.x) * (ymin - p1.y) / (p2.y - p1.y);
                p1.y = ymin;
            } else if (codes1.top) {
                p1.x += (p2.x - p1.x) * (ymax - p1.y) / (p2.y - p1.y);
                p1.y = ymax;
            } else if (codes2.left) {
                p2.y += (p1.y - p2.y) * (xmin - p2.x) / (p1.x - p2.x);
                p2.x = xmin;
            } else if (codes2.right) {
                p2.y += (p1.y - p2.y) * (xmax - p2.x) / (p1.x - p2.x);
                p2.x = xmax;
            } else if (codes2.bottom) {
                p2.x += (p1.x - p2.x) * (ymin - p2.y) / (p1.y - p2.y);
                p2.y = ymin;
            } else if (codes2.top) {
                p2.x += (p1.x - p2.x) * (ymax - p2.y) / (p1.y - p2.y);
                p2.y = ymax;
            }

            codes1 = computeRegionCodes(p1, xmin, xmax, ymin, ymax);
            codes2 = computeRegionCodes(p2, xmin, xmax, ymin, ymax);
        }
    }
}

// Function to handle mouse clicks
void mouseClick(int button, int state, int x, int y) {
    static std::vector<Point> vertices;
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        int viewportX = x;
        int viewportY = glutGet(GLUT_WINDOW_HEIGHT) - y;

        vertices.push_back({viewportX, viewportY});
        drawPoint(viewportX, viewportY);

        if (vertices.size() > 1) {
            int lastIdx = vertices.size() - 2;
            drawPolygon(vertices);
            Point p1 = vertices[lastIdx];
            Point p2 = vertices[lastIdx + 1];
            clipLine(p1, p2, 0, glutGet(GLUT_WINDOW_WIDTH), 0, glutGet(GLUT_WINDOW_HEIGHT));
            glBegin(GL_LINES);
            glVertex2i(p1.x, p1.y);
            glVertex2i(p2.x, p2.y);
            glEnd();
        }

        glFlush();
    }
}

// Function to handle keyboard input
void keyboardInput(unsigned char key, int x, int y) {
    if (key == 'c' || key == 'C') {
        glClear(GL_COLOR_BUFFER_BIT);
        glFlush();
    }
}

// Function to handle window drawing
void draw() {
    glClear(GL_COLOR_BUFFER_BIT);
    glFlush();
}

// Function to handle window resizing
void reshape(int width, int height) {
    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, width, 0, height);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutCreateWindow("Cohen-Sutherland Polygon Clipping");
    glClearColor(1.0, 1.0, 1.0, 0.0);
    gluOrtho2D(0, 640, 0, 480);
    glutDisplayFunc(draw);
    glutReshapeFunc(reshape);
    glutMouseFunc(mouseClick);
    glutKeyboardFunc(keyboardInput);
    glutMainLoop();
    return 0;
}
