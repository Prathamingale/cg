#include <GL/freeglut.h>
#include <GL/glut.h>

int screenWidth = 640;
int screenHeight = 480;

void boundaryFill(int x, int y, float fillColor[3], float borderColor[3]) {
    float currentColor[3];
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, currentColor);

    if (
        currentColor[0] != borderColor[0] ||
        currentColor[1] != borderColor[1] ||
        currentColor[2] != borderColor[2]
    ) {
        glColor3fv(fillColor);
        glBegin(GL_POINTS);
        glVertex2i(x, y);
        glEnd();
        glFlush();

        boundaryFill(x + 1, y, fillColor, borderColor);
        boundaryFill(x - 1, y, fillColor, borderColor);
        boundaryFill(x, y + 1, fillColor, borderColor);
        boundaryFill(x, y - 1, fillColor, borderColor);
    }
}

void draw() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Drawing a polygon
    glColor3f(0.0, 0.0, 1.0); // Blue color
    glBegin(GL_POLYGON);
    glVertex2i(200, 200);
    glVertex2i(400, 200);
    glVertex2i(400, 400);
    glVertex2i(300, 500);
    glVertex2i(200, 400);
    glEnd();

    glFlush();
}

void mouseClick(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        float fillColor[3] = {1.0, 0.0, 0.0};      // Red color
        float borderColor[3] = {0.0, 0.0, 1.0};   // Blue color

        boundaryFill(x, screenHeight - y, fillColor, borderColor);
    }
}

void init() {
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, screenWidth, 0, screenHeight);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(screenWidth, screenHeight);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("Non-Recursive Boundary Fill");
    init();
    glutDisplayFunc(draw);
    glutMouseFunc(mouseClick);
    glutMainLoop();

    return 0;
}
